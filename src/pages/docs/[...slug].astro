---
import {
	Breadcrumb,
	BreadcrumbItem,
	BreadcrumbLink,
	BreadcrumbList,
	BreadcrumbPage,
	BreadcrumbSeparator,
} from "@/lib/components/ui/breadcrumb";
import DocsLayout from "@/lib/layouts/docs-layout.astro";
import type { CollectionKey } from "astro:content";
import { getCollection, render, type CollectionEntry } from "astro:content";
import config from "../../../explainer.config";
import CodeGroupWrapper from "../../lib/plugins/code-group/CodeGroupWrapper.astro";
import type { HeadingNode } from "../../lib/utils";
interface Props {
	element: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
	const collections = Object.keys(config.docs);
	const contents = await Promise.all(
		collections.map((collection) => {
			return getCollection(collection as CollectionKey);
		}),
	);

	return contents.flatMap((element) =>
		element.map((item) => ({
			params: { slug: item.collection + "/" + item.data.permalink },
			props: { element: item },
		})),
	);
}

const { element } = Astro.props;
const { Content, headings } = await render(element);

const availableHeadings = headings.filter((heading) =>
	[2, 3].includes(heading.depth),
);

function buildHeadingTree(headings: typeof availableHeadings): HeadingNode[] {
	const result: HeadingNode[] = [];
	let currentH2: HeadingNode | null = null;

	for (const heading of headings) {
		const node: HeadingNode = {
			depth: heading.depth,
			slug: heading.slug,
			text: heading.text,
			children: [],
		};

		if (heading.depth === 2) {
			currentH2 = node;
			result.push(node);
		} else if (heading.depth === 3 && currentH2) {
			currentH2.children.push(node);
		}
	}

	return result;
}

const headingTree = buildHeadingTree(availableHeadings);

function pascalCase(str: string) {
	return str.charAt(0).toUpperCase() + str.slice(1);
}
---

<DocsLayout>
	<div class="lg:col-span-8">
		<div class="flex flex-col lg:grid lg:grid-cols-10 lg:gap-8">
			<div class="lg:col-span-8 py-6 px-4">
				<div class="mb-2.5">
					<Breadcrumb>
						<BreadcrumbList>
							<BreadcrumbItem>
								<BreadcrumbPage className="text-foreground">Docs</BreadcrumbPage
								>
							</BreadcrumbItem>
							<BreadcrumbSeparator />
							<BreadcrumbItem>
								<BreadcrumbPage className="text-foreground">
									{pascalCase(element.collection)}
								</BreadcrumbPage>
							</BreadcrumbItem>
							<BreadcrumbSeparator />
							<BreadcrumbItem>
								<BreadcrumbLink
									href={`/docs/${element.collection}/${element.data.permalink}`}
									className="text-primary font-medium"
								>
									{element.data.title}
								</BreadcrumbLink>
							</BreadcrumbItem>
						</BreadcrumbList>
					</Breadcrumb>
				</div>

				<div class="prose">
					<Content components={{ CodeGroupWrapper }} />
				</div>
			</div>

			{/* Table of contents */}
			<aside class="hidden xl:block w-64">
				<div class="sticky top-14 p-4 overflow-y-auto h-[calc(100vh-4rem)]">
					<p
						class="group text-sm font-semibold flex-1 items-center gap-1.5 py-1.5 -mt-1.5 focus-visible:outline-primary hidden lg:flex"
					>
						<span class="truncate">On this page</span>
					</p>

					<ul class="min-w-0 ms-2.5 ps-4 border-s border-gray-300">
						{
							headingTree.map((heading) => (
								<li>
									<a
										href={`#${heading.slug}`}
										class="group relative text-sm flex items-center focus-visible:outline-primary py-1 text-muted-foreground hover:text-primary transition-colors"
									>
										{heading.text}
									</a>
									<ul class="ms-3">
										{heading.children.map((child) => (
											<li class="min-w-0 -ms-px">
												<a
													href={`#${child.slug}`}
													class="group relative text-sm flex items-center focus-visible:outline-primary py-1 text-muted-foreground hover:text-primary transition-colors"
												>
													<span class="truncate">{child.text}</span>
												</a>
											</li>
										))}
									</ul>
								</li>
							))
						}
					</ul>
				</div>
			</aside>
		</div>
	</div>
</DocsLayout>
